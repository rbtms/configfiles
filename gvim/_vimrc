" Vim with all enhancements
source $VIMRUNTIME/vimrc_example.vim

" Remap a few keys for Windows behavior
source $VIMRUNTIME/mswin.vim

" Windows options
    " Restore cursor to file position in previous editing session  
set viminfo='10,\"100,:20,%,n$VIM/_viminfo
    " 1.2 executing OS command within Vim
set shell=c:\Windows\system32\cmd.exe
    " shell command flag
set shellcmdflag=/c

" Compatibility and configuration
set nocompatible
set viminfo='20,\"50 "
set ts=4 " tabstop
set sw=4 " shiftwidth
set expandtab
set wrap " wraps longs lines to screen size
set belloff=all
set bs=2 " allow backspacing over everything in insert mode
set ai " always set autoindenting on

set guioptions -=m " Remove menu bar
set guioptions -=T " Remove tool bar
set guioptions -=r " Remove right vertical scrolling bar
set guioptions -=L " Remove left vertical scrolling bar

" Filetype plugins
filetype indent on

" Syntax scheme
syntax on
colorscheme onedark

" Default windows height
win 130 25 " The window height

" Show line numbers
set number

" Change GUI language
language en_US
language messages en_US
language ctype en_US
language time en_US
let $LANG = 'en_US'

" Ignore case when searching
set ignorecase

" Set default font
set guifont=Consolas:h11:cANSI

" Move all temporal files to a different directory
set backup
set noundofile
set backupdir=C:\WINDOWS\Temp
set backupskip=C:\WINDOWS\Temp
" set undodir=C:\WINDOWS\Temp
set directory=C:\WINDOWS\Temp
set writebackup

" set nobackup
" set noswapfile
" set noundofile

" Disable start text
set shortmess+=I

" Fix visual mode behaviour
behave xterm

" Open windows on right side
:set splitright

" NERDTree
let NERDTreeIgnore=['.swp', '.ini', '.swp', '.DAT']
let NERDTreeShowHidden=1

" Home key behaviour
noremap  <expr> <Home> col('.') == match(getline('.'), '\S') + 1 ? "\<Home>" : "^"
inoremap <expr> <Home> col('.') == match(getline('.'), '\S') + 1 ? "\<Home>" : "\<C-O>^"

" Open terminals on the right side
:command Term vert term

" Use the internal diff if available.
" Otherwise use the special 'diffexpr' for Windows.
if &diffopt !~# 'internal'
  set diffexpr=MyDiff()
endif
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction
